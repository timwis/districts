{"ts":1361649376979,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*global window document console define require */\n(function() {\n\n    /**\n     * @author James Cardona\n     */\n\n    \"use strict\";\n\n    var root = this;\n\n    /************************************\n     * ESRI Rest to GeoJSON Converter\n     ************************************/\n    function esriConverter(){\n        var esriCon = {};\n\n        /*determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring\n          or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-\n          points-are-in-clockwise-order*/\n        function ringIsClockwise(ringToTest) {\n            var total = 0,i = 0,\n                rLength = ringToTest.length,\n                pt1 = ringToTest[i],\n                pt2;\n            for (i; i < rLength - 1; i++) {\n                pt2 = ringToTest[i + 1];\n                total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);\n                pt1 = pt2;\n            }\n            return (total >= 0);\n        }\n\n        /*Converts ESRI Rest Geometry to GeoJSON Geometry\n          Input is ESRI Rest Geometry Object*/\n        function esriGeometryToGcGeometry(esriGeom){\n            var gcGeom,\n                i,\n                g,\n                coordinates,\n                geomParts,\n                ringArray,\n                ring;\n\n            //check for x, points, paths, or rings to determine geometry type.\n            if (esriGeom) {\n                gcGeom = {};\n                if (esriGeom.x) {\n                    gcGeom.type = \"Point\";\n                    coordinates = [esriGeom.x, esriGeom.y];\n                } else if (esriGeom.points) {\n                    gcGeom.type = \"MultiPoint\";\n                    coordinates = esriGeom.points;\n                } else if (esriGeom.paths) {\n                    geomParts = esriGeom.paths;\n                    if (geomParts.length === 1) {\n                        gcGeom.type = \"LineString\";\n                        coordinates = geomParts[0];\n                    } else {\n                        gcGeom.type = \"MultiLineString\";\n                        coordinates = geomParts;\n                    }\n                } else if (esriGeom.rings) {\n                    geomParts = esriGeom.rings;\n                    ringArray = [];\n                    for (i = 0; i < geomParts.length; i++) {\n                        ring = geomParts[i];\n                        if (ringIsClockwise(ring)) {\n                            ringArray.push([ring]);\n                        } else {\n                            ringArray[ringArray.length - 1].push(ring);\n                        }\n                    }\n                    if (ringArray.length > 1) {\n                        coordinates = ringArray;\n                        gcGeom.type = \"MultiPolygon\";\n                    } else {\n                        coordinates = ringArray.pop();\n                        gcGeom.type = \"Polygon\";\n                    }\n                }\n                gcGeom.coordinates = coordinates;\n            }\n            return gcGeom;\n        }\n\n        /*\n         * Converts GeoJSON feature to ESRI REST Feature.\n         * Input parameter is an ESRI Rest Feature object\n         */\n        function esriFeatureToGcFeature(esriFeature) {\n            var gcFeat = null,\n                prop,\n                gcProps,\n                i,\n                p;\n            if (esriFeature) {\n                gcFeat = {\n                    type: \"Feature\"\n                };\n                if (esriFeature.geometry) {\n                    gcFeat.geometry = esriGeometryToGcGeometry(esriFeature.geometry);\n                }\n                if (esriFeature.attributes) {\n                    gcProps = {};\n                    p = esriFeature.attributes;\n                    for (prop in esriFeature.attributes) {\n                        gcProps[prop] = esriFeature.attributes[prop];\n                    }\n                    gcFeat.properties = gcProps;\n                }\n            }\n            return gcFeat;\n        }\n\n        /*Converts ESRI Rest Featureset, Feature, or Geometry\n          to GeoJSON FeatureCollection, Feature, or Geometry */\n        esriCon.toGeoJson = function(esriObject) {\n            var outObj, i, esriFeats, gcFeat;\n            if (esriObject){\n                if (esriObject.features){\n                    outObj = {\n                        type: \"FeatureCollection\",\n                        features: []\n                    };\n                    esriFeats = esriObject.features;\n                    for (i = 0; i < esriFeats.length; i++) {\n                        gcFeat = esriFeatureToGcFeature(esriFeats[i]);\n                        if (gcFeat) {\n                            outObj.features.push(gcFeat);\n                        }\n                    }\n                }\n                else if (esriObject.geometry){\n                    outObj = esriFeatureToGcFeature(esriObject);\n                }\n                else{\n                    outObj = esriGeometryToGcGeometry(esriObject);\n                }\n            }\n            return outObj;\n        };\n\n        return esriCon;\n    }\n\n    /************************************************\n     * GeoJSON to ESRI Rest Converter\n     ************************************************/\n    function geoJsonConverter(){\n        var gCon = {};\n\n        /*compares a GeoJSON geometry type and ESRI geometry type to see if they can be safely\n          put together in a single ESRI feature. ESRI features must only have one\n          geometry type, point, line, polygon*/\n        function isCompatible(esriGeomType, gcGeomType) {\n            var compatible = false;\n            if ((esriGeomType === \"esriGeometryPoint\" || esriGeomType === \"esriGeometryMultipoint\") && (gcGeomType === \"Point\" || gcGeomType === \"MultiPoint\")) {\n                compatible = true;\n            } else if (esriGeomType === \"esriGeometryPolyline\" && (gcGeomType === \"LineString\" || gcGeomType === \"MultiLineString\")) {\n                compatible = true;\n            } else if (esriGeomType === \"esriGeometryPolygon\" && (gcGeomType === \"Polygon\" || gcGeomType === \"MultiPolygon\")) {\n                compatible = true;\n            }\n            return compatible;\n        }\n\n        /*Take a GeoJSON geometry type and make an object that has information about\n          what the ESRI geometry should hold. Includes the ESRI geometry type and the name\n          of the member that holds coordinate information*/\n        function gcGeomTypeToEsriGeomInfo(gcType) {\n            var esriType,\n                geomHolderId;\n            if (gcType === \"Point\") {\n                esriType = \"esriGeometryPoint\";\n            } else if (gcType === \"MultiPoint\") {\n                esriType = \"esriGeometryMultipoint\";\n                geomHolderId = \"points\";\n            } else if (gcType === \"LineString\" || gcType === \"MultiLineString\") {\n                esriType = \"esriGeometryPolyline\";\n                geomHolderId = \"paths\";\n            } else if (gcType === \"Polygon\" || gcType === \"MultiPolygon\") {\n                esriType = \"esriGeometryPolygon\";\n                geomHolderId = \"rings\";\n            }\n            return {\n                type: esriType,\n                    geomHolder: geomHolderId\n            };\n        }\n\n        /*Wraps GeoJSON coordinates in an array if necessary so code can iterate\n          through array of points, rings, or lines and add them to an ESRI geometry\n          Input is a GeoJSON geometry object. A GeoJSON GeometryCollection is not a\n          valid input */\n        function gcCoordinatesToEsriCoordinates(gcGeom) {\n            var i,\n                len,\n                esriCoords;\n            if (gcGeom.type === \"MultiPoint\" || gcGeom.type === \"MultiLineString\" || gcGeom.type === \"Polygon\") {\n                esriCoords = gcGeom.coordinates;\n            } else if (gcGeom.type === \"Point\" || gcGeom.type === \"LineString\") {\n                esriCoords = [gcGeom.coordinates];\n            } else if (gcGeom.type === \"MultiPolygon\") {\n                /* GeoJson MultiPolygons contains arrays of arrays. Maybe for donut Polygons? May need further testing */\n                esriCoords = [];\n                for (i = 0, len = gcGeom.coordinates.length; i < len; i++) {\n                    esriCoords.push(gcGeom.coordinates[i][0]);\n                }\n            }\n            return esriCoords;\n        }\n\n        /*Converts GeoJSON geometry to ESRI geometry. The ESRI geometry is\n          only allowed to contain one type of geometry, so if the GeoJSON\n          geometry is a GeometryCollection, then only geometries compatible\n          with the first geometry type in the collection are added to the ESRI geometry\n\n          Input parameter is a GeoJSON geometry object.*/\n        function gcGeometryToEsriGeometry(gcGeom) {\n            var esriGeometry,\n                esriGeomInfo,\n                gcGeometriesToConvert,\n                i,\n                g,\n                coords;\n\n            //if geometry collection, get info about first geometry in collection\n            if (gcGeom.type === \"GeometryCollection\") {\n                gcGeometriesToConvert = [gcGeom.geometries.shift()];\n                esriGeomInfo = gcGeomTypeToEsriGeomInfo(gcGeometriesToConvert[0].type);\n\n                //loop through collection and only add compatible geometries to the array\n                //of geometries that will be converted\n                for (i = 0; i < gcGeom.geometries.length; i++) {\n                    if (isCompatible(esriGeomInfo.type, gcGeom.geometries[i].type)) {\n                        gcGeometriesToConvert.push(gcGeom.geometries[i]);\n                    }\n                }\n            } else {\n                esriGeomInfo = gcGeomTypeToEsriGeomInfo(gcGeom.type);\n                gcGeometriesToConvert = [gcGeom];\n            }\n\n            //if a collection contained multiple points, change the ESRI geometry\n            //type to MultiPoint\n            if (esriGeomInfo.type === \"esriGeometryPoint\" && gcGeometriesToConvert.length > 1) {\n                esriGeomInfo = gcGeomTypeToEsriGeomInfo(\"MultiPoint\");\n            }\n\n            //make new empty ESRI geometry object\n            esriGeometry = {\n                //type: esriGeomInfo.type,\n                spatialReference: {\n                                      wkid: 4326\n                                  }\n            };\n\n            //perform conversion\n            if (esriGeomInfo.type === \"esriGeometryPoint\") {\n                if (gcGeometriesToConvert[0].coordinates.length === 0) {\n                    esriGeometry.x = null;\n                    esriGeometry.y = null;\n                } else {\n                    esriGeometry.x = gcGeometriesToConvert[0].coordinates[0];\n                    esriGeometry.y = gcGeometriesToConvert[0].coordinates[1];\n                }\n            } else {\n                esriGeometry[esriGeomInfo.geomHolder] = [];\n                for (i = 0; i < gcGeometriesToConvert.length; i++) {\n                    coords = gcCoordinatesToEsriCoordinates(gcGeometriesToConvert[i]);\n                    for (g = 0; g < coords.length; g++) {\n                        esriGeometry[esriGeomInfo.geomHolder].push(coords[g]);\n                    }\n                }\n            }\n            return esriGeometry;\n        }\n\n        /*Converts GeoJSON feature to ESRI REST Feature.\n          Input parameter is a GeoJSON Feature object*/\n        function gcFeatureToEsriFeature(gcFeature) {\n            var esriFeat,\n                prop,\n                esriAttribs;\n            if (gcFeature) {\n                esriFeat = {};\n                if (gcFeature.geometry) {\n                    esriFeat.geometry = gcGeometryToEsriGeometry(gcFeature.geometry);\n                }\n                if (gcFeature.properties) {\n                    esriAttribs = {};\n                    for (prop in gcFeature.properties) {\n                        esriAttribs[prop] = gcFeature.properties[prop];\n                    }\n                    esriFeat.attributes = esriAttribs;\n                }\n            }\n            return esriFeat;\n        }\n\n        /*Converts GeoJSON FeatureCollection, Feature, or Geometry\n          to ESRI Rest Featureset, Feature, or Geometry*/\n        gCon.toEsri = function(geoJsonObject) {\n            var outObj,\n                i,\n                gcFeats,\n                esriFeat;\n            if (geoJsonObject){\n                if (geoJsonObject.type === \"FeatureCollection\"){\n                    outObj = {\n                        features: []\n                    };\n                    gcFeats = geoJsonObject.features;\n                    for (i = 0; i < gcFeats.length; i++) {\n                        esriFeat = gcFeatureToEsriFeature(gcFeats[i]);\n                        if (esriFeat) {\n                            outObj.features.push(esriFeat);\n                        }\n                    }\n                }\n                else if (geoJsonObject.type === \"Feature\"){\n                    outObj = gcFeatureToEsriFeature(geoJsonObject);\n                }\n                else{\n                    outObj = gcGeometryToEsriGeometry(geoJsonObject);\n                }\n            }\n            return outObj;\n        };\n\n        return gCon;\n    }\n\n    if (typeof define === 'function') {\n        var module = {\n            esriConverter: esriConverter,\n            geoJsonConverter: geoJsonConverter\n        };\n\n        define('extras/jsonConverters', [], function() {\n\n            return module;\n\n        });\n    } else {\n        root.esriConverter = esriConverter;\n        root.geoJsonConverter = geoJsonConverter;\n    }\n\n}).call(this);\n\n"]],"start1":0,"start2":0,"length1":0,"length2":13738}]],"length":13738}
